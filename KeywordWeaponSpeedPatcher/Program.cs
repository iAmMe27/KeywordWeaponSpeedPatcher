using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace KeywordWeaponSpeedPatcher
{
    public class Settings
    {
        [SettingName("Dagger")]
        public float WeapTypeDagger = 1.3f;
        [SettingName("Sword")]
        public float WeapTypeSword  = 1.0f;
        [SettingName("War Axe")]
        public float WeapTypeWarAxe = 0.9f;
        [SettingName("Mace")]
        public float WeapTypeMace = 0.8f;
        [SettingName("Greatsword")]
        public float WeapTypeGreatsword = 0.7f;
        [SettingName("Battleaxe")]
        public float WeapTypeBattleaxe = 0.7f;
        [SettingName("Warhammer")]
        public float WeapTypeWarhammer = 0.6f;
        [SettingName("Rapier")]
        public float WeapTypeRapier = 1.2f;
        [SettingName("Katana")]
        public float WeapTypeKatana = 1.1f;
        [SettingName("Halberd")]
        public float WeapTypeHalberd = 0.7f;
        [SettingName("Spear")]
        public float WeapTypeSpear = 0.7f;
        [SettingName("Pike")]
        public float WeapTypePike = 0.7f;
        [SettingName("Claw")]
        public float WeapTypeClaw = 1.3f;
        [SettingName("Quarterstaff")]
        public float WeapTypeQuarterstaff = 0.7f;

        // iAm's additions - added Bow support, skipping of weapons that are templates and a Blacklist based on EditorIDs
        [SettingName("Bow")]
        public float WeapTypeBow = 0.8f;

        [SettingName("Skip Templates")]
        [Tooltip("When checked, will skip any template weapons")]
        public bool SkipTemplates = true;

        [SettingName("Blacklist")]
        [Tooltip("Any EditorIDs added here will be skipped when patching")]
        public List<string> blacklist = new();
    }

    public class Program
    {
        private static Lazy<Settings> _settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "KeywordWeaponSpeedPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var weapon in state.LoadOrder.PriorityOrder.Weapon().WinningContextOverrides())
            {
                // iAm's additions - if weapon has the CNAM record filled, skip it because it is based on a template
                if (weapon.Record.Template.TryResolve(state.LinkCache) is not null)
                {
                    continue;
                }

                // if the item is in the blacklist, skip it
                if (_settings.Value.blacklist.Count > 0)
                {
                    if (weapon.Record.EditorID != null)
                    {
                        if (_settings.Value.blacklist.Contains(weapon.Record.EditorID))
                        {
                            continue;
                        }
                    }
                }
                
                var patched = state.PatchMod.Weapons.GetOrAddAsOverride(weapon.Record);

                if (weapon.Record.HasKeyword("WeapTypeDagger", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeDagger;
                if (weapon.Record.HasKeyword("WeapTypeSword", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeSword;
                if (weapon.Record.HasKeyword("WeapTypeWarAxe", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeWarAxe;
                if (weapon.Record.HasKeyword("WeapTypeMace", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeMace;
                if (weapon.Record.HasKeyword("WeapTypeGreatsword", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeGreatsword;
                if (weapon.Record.HasKeyword("WeapTypeBattleaxe", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeBattleaxe;
                if (weapon.Record.HasKeyword("WeapTypeWarhammer", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeWarhammer;
                if (weapon.Record.HasKeyword("WeapTypeRapier", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeRapier;
                if (weapon.Record.HasKeyword("WeapTypeKatana", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeKatana;
                if (weapon.Record.HasKeyword("WeapTypeHalberd", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeHalberd;
                if (weapon.Record.HasKeyword("WeapTypeSpear", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeSpear;
                if (weapon.Record.HasKeyword("WeapTypePike", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypePike;
                if (weapon.Record.HasKeyword("WeapTypeClaw", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeClaw;
                if (weapon.Record.HasKeyword("WeapTypeQuarterstaff", state.LinkCache))
                    patched.Data!.Speed = _settings.Value.WeapTypeQuarterstaff;

                if (Math.Abs(patched.Data!.Speed - weapon.Record.Data!.Speed) < 0.001f)
                    state.PatchMod.Remove(weapon.Record);

                Console.WriteLine($"Patched weapon: {patched.Name}");
            }
        }
    }
}
